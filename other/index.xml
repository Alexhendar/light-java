<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other-rsses on Light Java - The fastest Java API Framework</title>
    <link>https://networknt.github.io/light-java/other/index.xml</link>
    <description>Recent content in Other-rsses on Light Java - The fastest Java API Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 23 Oct 2016 13:23:59 -0400</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-java/other/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>info</title>
      <link>https://networknt.github.io/light-java/other/info/</link>
      <pubDate>Sun, 23 Oct 2016 13:23:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/info/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Almost every module in light-java has a configuration file that can be
externalized with default can be in the module itself or the API implementation
config folder. In order to give an overview of the server runtime, system
properties, specification as well as configurations for each enabled modules,
there is a special handler that can be included in your swagger specification.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;info.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
  &amp;quot;enableServerInfo&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike other modules, server info handler is not plugin into the handler chain
during server start up. It should be part of the swagger specification and
route to this handler in the routing handler. If enableServerInfo is false,
then an error message will returned with ERR10013 - SERVER_INFO_DISABLED.&lt;/p&gt;

&lt;h2 id=&#34;swagger&#34;&gt;Swagger&lt;/h2&gt;

&lt;p&gt;Along with other endpoints/paths defined in the swagger specification, an
extra endpoint should be added with special oauth2 scope for this handler.
It is recommended to use /basePath/server/info so that some automatic tool
or API portal server can access to it in a standard way.&lt;/p&gt;

&lt;h2 id=&#34;extension&#34;&gt;Extension&lt;/h2&gt;

&lt;p&gt;For other contributed modules or API application specific modules, please
following the following guideline to register your module
in /basePath/server/info endpoint.&lt;/p&gt;

&lt;p&gt;For handlers, it is registered when injecting into the handler chain during
server start up.
For other utilities, it should have a static block to register itself during
server start up.&lt;/p&gt;

&lt;p&gt;Here is the example code to register module and its config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ModuleRegistry.registerModule(ValidatorHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ValidatorHandler.CONFIG_NAME), null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mask-sensitive-data-in-config&#34;&gt;Mask sensitive data in config&lt;/h2&gt;

&lt;p&gt;When module registers itself, it provide the configuration in JSON format for
the module. Some components have sensitive info in their configuration, for
example, db password, client secret etc. The third parameter in registerModule
is a list of keys in the configuration file that need to be masked.&lt;/p&gt;

&lt;p&gt;Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; masks = new ArrayList&amp;lt;String&amp;gt;();
masks.add(&amp;quot;trustPass&amp;quot;);
masks.add(&amp;quot;keyPass&amp;quot;);
ModuleRegistry.registerModule(Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;

&lt;p&gt;Here is the output from undertow swagger-codegen petstore specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;environment&amp;quot;: {
    &amp;quot;host&amp;quot;: {
      &amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;hostname&amp;quot;: &amp;quot;joy&amp;quot;,
      &amp;quot;dns&amp;quot;: &amp;quot;localhost&amp;quot;
    },
    &amp;quot;runtime&amp;quot;: {
      &amp;quot;availableProcessors&amp;quot;: 4,
      &amp;quot;freeMemory&amp;quot;: 430837608,
      &amp;quot;totalMemory&amp;quot;: 504889344,
      &amp;quot;maxMemory&amp;quot;: 7486832640
    },
    &amp;quot;system&amp;quot;: {
      &amp;quot;javaVendor&amp;quot;: &amp;quot;Oracle Corporation&amp;quot;,
      &amp;quot;javaVersion&amp;quot;: &amp;quot;1.8.0_66&amp;quot;,
      &amp;quot;osName&amp;quot;: &amp;quot;Linux&amp;quot;,
      &amp;quot;osVersion&amp;quot;: &amp;quot;4.2.0-42-generic&amp;quot;,
      &amp;quot;userTimezone&amp;quot;: &amp;quot;America/Toronto&amp;quot;
    }
  },
  &amp;quot;specification&amp;quot;: {
    &amp;quot;basePath&amp;quot;: &amp;quot;/v2&amp;quot;,
    &amp;quot;paths&amp;quot;: {
      &amp;quot;/pet&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Add a new pet to the store&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;addPet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Update an existing pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePet&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/json&amp;quot;,
            &amp;quot;application/xml&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet object that needs to be added to the store&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            },
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Validation exception&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByStatus&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Multiple status values can be provided with comma separated strings&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByStatus&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Status values that need to be considered for filter&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                &amp;quot;enum&amp;quot;: [
                  &amp;quot;available&amp;quot;,
                  &amp;quot;pending&amp;quot;,
                  &amp;quot;sold&amp;quot;
                ],
                &amp;quot;default&amp;quot;: &amp;quot;available&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid status value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/findByTags&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Finds Pets by tags&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;findPetsByTags&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;tags&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Tags to filter by&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
              &amp;quot;items&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;collectionFormat&amp;quot;: &amp;quot;multi&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid tag value&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;deprecated&amp;quot;: true,
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find pet by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a single pet&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getPetById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to return&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Pet&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updates a pet in the store with form data&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updatePetWithForm&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;application/x-www-form-urlencoded&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated name of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;status&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated status of the pet&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;405&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid input&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/x-www-form-urlencoded&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Deletes a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deletePet&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Pet id to delete&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Pet not found&amp;quot;
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/pet/{petId}/uploadImage&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;pet&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;uploads an image&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;uploadFile&amp;quot;,
          &amp;quot;consumes&amp;quot;: [
            &amp;quot;multipart/form-data&amp;quot;
          ],
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;petId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet to update&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;additionalMetadata&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Additional data to pass to server&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;file&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;formData&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;file to upload&amp;quot;,
              &amp;quot;required&amp;quot;: false,
              &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/ApiResponse&amp;quot;
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;petstore_auth&amp;quot;: [
                &amp;quot;write:pets&amp;quot;,
                &amp;quot;read:pets&amp;quot;
              ]
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;multipart/form-data&amp;quot;
        }
      },
      &amp;quot;/store/inventory&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Returns pet inventories by status&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;Returns a map of status codes to quantities&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getInventory&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
                &amp;quot;additionalProperties&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
                }
              }
            }
          },
          &amp;quot;security&amp;quot;: [
            {
              &amp;quot;api_key&amp;quot;: []
            }
          ],
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Place an order for a pet&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;placeOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;order placed for purchasing the pet&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid Order&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/store/order/{orderId}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Find purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with value &amp;gt;= 1 and &amp;lt;= 10. Other values will generated exceptions&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getOrderById&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of pet that needs to be fetched&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;maximum&amp;quot;: 10,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Order&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;store&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete purchase order by ID&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteOrder&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;orderId&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;ID of the order that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
              &amp;quot;minimum&amp;quot;: 1,
              &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid ID supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Order not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Create user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Created user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithArray&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithArrayInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/createWithList&amp;quot;: {
        &amp;quot;post&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Creates list of users with given input array&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;createUsersWithListInput&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;List of user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                &amp;quot;items&amp;quot;: {
                  &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
                }
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/login&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs user into the system&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;loginUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The user name for login&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;name&amp;quot;: &amp;quot;password&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;query&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The password for login in clear text&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
              },
              &amp;quot;headers&amp;quot;: {
                &amp;quot;X-Rate-Limit&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;calls per hour allowed by the user&amp;quot;
                },
                &amp;quot;X-Expires-After&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;,
                  &amp;quot;description&amp;quot;: &amp;quot;date in UTC when token expires&amp;quot;
                }
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username/password supplied&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/logout&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Logs out current logged in user session&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;logoutUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;default&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      },
      &amp;quot;/user/{username}&amp;quot;: {
        &amp;quot;get&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Get user by user name&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;getUserByName&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be fetched. Use user1 for testing. &amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;200&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;successful operation&amp;quot;,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            },
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;put&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Updated user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;updateUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;name that need to be updated&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            },
            {
              &amp;quot;in&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;name&amp;quot;: &amp;quot;body&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;Updated user object&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;schema&amp;quot;: {
                &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/User&amp;quot;
              }
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid user supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        },
        &amp;quot;delete&amp;quot;: {
          &amp;quot;tags&amp;quot;: [
            &amp;quot;user&amp;quot;
          ],
          &amp;quot;summary&amp;quot;: &amp;quot;Delete user&amp;quot;,
          &amp;quot;description&amp;quot;: &amp;quot;This can only be done by the logged in user.&amp;quot;,
          &amp;quot;operationId&amp;quot;: &amp;quot;deleteUser&amp;quot;,
          &amp;quot;produces&amp;quot;: [
            &amp;quot;application/xml&amp;quot;,
            &amp;quot;application/json&amp;quot;
          ],
          &amp;quot;parameters&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;username&amp;quot;,
              &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
              &amp;quot;description&amp;quot;: &amp;quot;The name that needs to be deleted&amp;quot;,
              &amp;quot;required&amp;quot;: true,
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          ],
          &amp;quot;responses&amp;quot;: {
            &amp;quot;400&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;Invalid username supplied&amp;quot;
            },
            &amp;quot;404&amp;quot;: {
              &amp;quot;description&amp;quot;: &amp;quot;User not found&amp;quot;
            }
          },
          &amp;quot;x-accepts&amp;quot;: &amp;quot;application/json&amp;quot;,
          &amp;quot;x-contentType&amp;quot;: &amp;quot;application/json&amp;quot;
        }
      }
    },
    &amp;quot;host&amp;quot;: &amp;quot;petstore.swagger.io&amp;quot;,
    &amp;quot;schemes&amp;quot;: [
      &amp;quot;http&amp;quot;
    ],
    &amp;quot;externalDocs&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;Find out more about Swagger&amp;quot;,
      &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
    },
    &amp;quot;securityDefinitions&amp;quot;: {
      &amp;quot;petstore_auth&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;oauth2&amp;quot;,
        &amp;quot;authorizationUrl&amp;quot;: &amp;quot;http://petstore.swagger.io/oauth/dialog&amp;quot;,
        &amp;quot;flow&amp;quot;: &amp;quot;implicit&amp;quot;,
        &amp;quot;scopes&amp;quot;: {
          &amp;quot;write:pets&amp;quot;: &amp;quot;modify pets in your account&amp;quot;,
          &amp;quot;read:pets&amp;quot;: &amp;quot;read your pets&amp;quot;
        }
      },
      &amp;quot;api_key&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;apiKey&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;api_key&amp;quot;,
        &amp;quot;in&amp;quot;: &amp;quot;header&amp;quot;
      }
    },
    &amp;quot;definitions&amp;quot;: {
      &amp;quot;Order&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;petId&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;quantity&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;shipDate&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;Order Status&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;placed&amp;quot;,
              &amp;quot;approved&amp;quot;,
              &amp;quot;delivered&amp;quot;
            ]
          },
          &amp;quot;complete&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;,
            &amp;quot;default&amp;quot;: false
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Order&amp;quot;
        }
      },
      &amp;quot;Category&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Category&amp;quot;
        }
      },
      &amp;quot;User&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;username&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;firstName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;lastName&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;email&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;password&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;phone&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;userStatus&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;User Status&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;User&amp;quot;
        }
      },
      &amp;quot;Tag&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Tag&amp;quot;
        }
      },
      &amp;quot;ApiResponse&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;code&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int32&amp;quot;
          },
          &amp;quot;type&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          },
          &amp;quot;message&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        }
      },
      &amp;quot;Pet&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;required&amp;quot;: [
          &amp;quot;name&amp;quot;,
          &amp;quot;photoUrls&amp;quot;
        ],
        &amp;quot;properties&amp;quot;: {
          &amp;quot;id&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
            &amp;quot;format&amp;quot;: &amp;quot;int64&amp;quot;
          },
          &amp;quot;category&amp;quot;: {
            &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Category&amp;quot;
          },
          &amp;quot;name&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;example&amp;quot;: &amp;quot;doggie&amp;quot;
          },
          &amp;quot;photoUrls&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;photoUrl&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          },
          &amp;quot;tags&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
            &amp;quot;xml&amp;quot;: {
              &amp;quot;name&amp;quot;: &amp;quot;tag&amp;quot;,
              &amp;quot;wrapped&amp;quot;: true
            },
            &amp;quot;items&amp;quot;: {
              &amp;quot;$ref&amp;quot;: &amp;quot;#/definitions/Tag&amp;quot;
            }
          },
          &amp;quot;status&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;pet status in the store&amp;quot;,
            &amp;quot;enum&amp;quot;: [
              &amp;quot;available&amp;quot;,
              &amp;quot;pending&amp;quot;,
              &amp;quot;sold&amp;quot;
            ]
          }
        },
        &amp;quot;xml&amp;quot;: {
          &amp;quot;name&amp;quot;: &amp;quot;Pet&amp;quot;
        }
      }
    },
    &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
    &amp;quot;info&amp;quot;: {
      &amp;quot;description&amp;quot;: &amp;quot;This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.&amp;quot;,
      &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;Swagger Petstore&amp;quot;,
      &amp;quot;termsOfService&amp;quot;: &amp;quot;http://swagger.io/terms/&amp;quot;,
      &amp;quot;contact&amp;quot;: {
        &amp;quot;email&amp;quot;: &amp;quot;apiteam@swagger.io&amp;quot;
      },
      &amp;quot;license&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
        &amp;quot;url&amp;quot;: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
      }
    },
    &amp;quot;tags&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;pet&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Everything about your Pets&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;store&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Access to Petstore orders&amp;quot;
      },
      {
        &amp;quot;name&amp;quot;: &amp;quot;user&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Operations about user&amp;quot;,
        &amp;quot;externalDocs&amp;quot;: {
          &amp;quot;description&amp;quot;: &amp;quot;Find out more about our store&amp;quot;,
          &amp;quot;url&amp;quot;: &amp;quot;http://swagger.io&amp;quot;
        }
      }
    ]
  },
  &amp;quot;component&amp;quot;: [
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.ServerInfoHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Server info endpoint that can output environment and component along with configuration&amp;quot;,
        &amp;quot;enableServerInfo&amp;quot;: true
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.validator.ValidatorHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;Validate request/response against swagger spec during runtime&amp;quot;,
        &amp;quot;enableValidator&amp;quot;: true,
        &amp;quot;enableResponseValidator&amp;quot;: false
      }
    },
    {
      &amp;quot;moduleName&amp;quot;: &amp;quot;com.networknt.info.SimpleAuditHandler&amp;quot;,
      &amp;quot;config&amp;quot;: {
        &amp;quot;description&amp;quot;: &amp;quot;controls how audit info should be logged. FullAudit is not recommended on produciton if performance is important&amp;quot;,
        &amp;quot;enableFullAudit&amp;quot;: false,
        &amp;quot;simple&amp;quot;: {
          &amp;quot;statusCode&amp;quot;: true,
          &amp;quot;responseTime&amp;quot;: true,
          &amp;quot;headers&amp;quot;: [
            &amp;quot;correlationId&amp;quot;,
            &amp;quot;traceabilityId&amp;quot;,
            &amp;quot;clientId&amp;quot;,
            &amp;quot;userId&amp;quot;,
            &amp;quot;scopeClientId&amp;quot;,
            &amp;quot;endpoint&amp;quot;
          ]
        },
        &amp;quot;enableSimpleAudit&amp;quot;: true,
        &amp;quot;full&amp;quot;: {
          &amp;quot;enableMask&amp;quot;: true,
          &amp;quot;request&amp;quot;: {
            &amp;quot;headers&amp;quot;: [
              &amp;quot;contentType&amp;quot;,
              &amp;quot;characterEncoding&amp;quot;
            ],
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;queryParameters&amp;quot;: true,
            &amp;quot;body&amp;quot;: true
          },
          &amp;quot;response&amp;quot;: {
            &amp;quot;headers&amp;quot;: true,
            &amp;quot;cookies&amp;quot;: true,
            &amp;quot;body&amp;quot;: true,
            &amp;quot;statusCode&amp;quot;: true,
            &amp;quot;contentLength&amp;quot;: true
          }
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Other Component</title>
      <link>https://networknt.github.io/light-java/other/</link>
      <pubDate>Sun, 23 Oct 2016 13:22:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/</guid>
      <description>&lt;p&gt;light-java is a Java API framework based on undertow http core that supports
swagger code generation and runtime request validation and security verification.&lt;/p&gt;

&lt;p&gt;It contains the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/server/&#34;&gt;server&lt;/a&gt; - a framework on top of undertow http core that support plugins to
performance different middleware handling.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/config/&#34;&gt;config&lt;/a&gt; - A module
that supports externalized configuration for standalone application and docker
container.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/utility/&#34;&gt;utility&lt;/a&gt; - utility classes that are shared between modules.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/client/&#34;&gt;client&lt;/a&gt; - wrapper of apache HttpClient and HttpAsyncClient. support automatically
cache and renew client credentials jwt token&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/info/&#34;&gt;info&lt;/a&gt; - a handler that
injects an endpoint /server/info that can out all plugged in component on the
server and configuration of each component.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/mask/&#34;&gt;mask&lt;/a&gt; - used to mask sensitive info before logging to audit.log or server.log&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://networknt.github.io/light-java/other/status/&#34;&gt;status&lt;/a&gt; - used to model error http response and assist production monitoring
with unique error code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; - a code generator
that generates the routing handlers and running API application based on swagger specification.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>server</title>
      <link>https://networknt.github.io/light-java/other/server/</link>
      <pubDate>Sun, 23 Oct 2016 13:21:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/server/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This module is responsible for managing life cycle of the embedded Undertow core http server. It starts the
server and initializes all middleware plugins along with route handler providers. It stops the server and
allow the resources to be released even someone click ctrl+c.&lt;/p&gt;

&lt;h2 id=&#34;middleware&#34;&gt;Middleware&lt;/h2&gt;

&lt;p&gt;Middleware plugins are the key components in the framework as they perform the heavy lifting behind the
scene. These components address the cross cutting concerns for all API implementation so that API developers
can focus on their domain logic only. Each component will have a config file (same name but with .json ext)
to control if the component will be enabled and its behavior. The framework has provide a list of the
middleware plugins and experienced developers can add other plugins into the request/response chain.&lt;/p&gt;

&lt;p&gt;To add your own middleware plugins, update com.networknt.handler.MiddlewareHandler in
your API project folder src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is the default middleware configuration generated by &lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This file is generated and should not be changed unless you want to plug in more handlers into the handler chain
# for cross cutting concerns. In most cases, you should replace some of the default handlers with your own implementation
# Please note: the sequence of these handlers are very important.

#Validator Validate request based on swagger specification (depending on Swagger and Body)
com.networknt.validator.ValidatorHandler
#Sanitizer Encode cross site scripting
com.networknt.sanitizer.SanitizerHandler
#SimpleAudit Log important info about the request into audit log
com.networknt.audit.AuditHandler
#Body Parse body based on content type in the header.
com.networknt.body.BodyHandler
#Security JWT token verification and scope verification (depending on SwaggerHandler)
com.networknt.security.JwtVerifyHandler
#Swagger Parsing swagger specification based on request uri and method.
com.networknt.swagger.SwaggerHandler
#Traceability check if X-Traceability-Id is in request header and put it into response header
com.networknt.traceability.TraceabilityHandler
#Metrics In order to calculate response time accurately, this needs to be the second.
com.networknt.metrics.MetricsHandler
#Exception Global exception handler that needs to be called first.
com.networknt.exception.ExceptionHandler

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;route-provider&#34;&gt;Route Provider&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/swagger-codegen&#34;&gt;swagger-codegen&lt;/a&gt; generates all the handlers and corresponding
test cases based on OpenAPI specification. It also generate PathHandlerProvider to group these handlers
together. This class is loaded by the server via Java SPI. The config file
com.networknt.server.HandlerProvider can be found at /src/main/resources/META-INF/services&lt;/p&gt;

&lt;p&gt;Here is an example of the config.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;io.swagger.handler.PathHandlerProvider

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;server.json is the configuration file for this module. To make it simpler, it only ip and port are
configurable at the moment. Other server parameters are set for the best performance assuming clould
deployment. In the future, these parameters might be exposed in the server.json.&lt;/p&gt;

&lt;p&gt;Here is an exmaple of server.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;description&amp;quot;: &amp;quot;server config&amp;quot;,
  &amp;quot;ip&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
  &amp;quot;port&amp;quot;: 8080
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>status</title>
      <link>https://networknt.github.io/light-java/other/status/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:51 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/status/</guid>
      <description>

&lt;p&gt;In the scenario that error happens on the server, a Status object is designed
to encapsulate standard http response 4xx and 5xx as well as application specific
error code ERRXXXXX (prefixed with ERR with another 5 digits) and error message.
Additionally, an description of the error will be available for more info about
the error.&lt;/p&gt;

&lt;h1 id=&#34;data-elements&#34;&gt;Data Elements&lt;/h1&gt;

&lt;p&gt;Here are the four fields in the Status object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    int statusCode;
    String code;
    String message;
    String description;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;construct-the-object-from-status-json&#34;&gt;Construct the object from status.json&lt;/h1&gt;

&lt;p&gt;status.json is a configuration file that contains all the status error defined
for the application and it has the structure like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;ERR10000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INVALID_AUTH_TOKEN&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Incorrect signature or malformed token in authorization header&amp;quot;
  },
  &amp;quot;ERR10001&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10001&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;AUTH_TOKEN_EXPIRED&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Jwt token in authorization header expired&amp;quot;
  },
  .
  .
  .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object from this config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static final String STATUS_METHOD_NOT_ALLOWED = &amp;quot;ERR10008&amp;quot;;
    .
    .
    .
    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To construct the object with arguments to have a description with context
information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   return new Status(&amp;quot;ERR11000&amp;quot;, queryParameter.getName(), swaggerOperation.getPathString().original());

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;convert-to-json-response&#34;&gt;Convert to JSON response.&lt;/h1&gt;

&lt;p&gt;There are several way to serialize the object to JSON in response. And string
concat is almost 10 times faster than Jackson ObjectMapper. For one million
objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Jackson Perf 503
ToString Perf 65

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;error-code-range-allocation&#34;&gt;Error code range allocation&lt;/h1&gt;

&lt;p&gt;The error code prefixed with ERR with another 5 digits so that it can be easily
scanned in log files. Also, certain error code can be used to trigger an alert
such as email or pager notification on system wide issues.&lt;/p&gt;

&lt;p&gt;In order to make sure there is no conflict for error code allocation between
teams, here is the rule&lt;/p&gt;

&lt;p&gt;10000-19999 reserved for the framework/system.
   * 10000-10100 security&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;11000-11999 validation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;12000-12999 undertow-oauth2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20000-29999 common error codes within your business domain.
90000-99999 customize error code that cannot be found in common range.&lt;/p&gt;

&lt;h1 id=&#34;send-the-json-as-response&#34;&gt;Send the JSON as response&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    Status status = new Status(STATUS_METHOD_NOT_ALLOWED);
    exchange.setStatusCode(status.getStatusCode());
    exchange.getResponseSender().send(status.toString());

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>utility</title>
      <link>https://networknt.github.io/light-java/other/utility/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/utility/</guid>
      <description>

&lt;p&gt;This module contains some useful classes that shared by multiple modules within
the framework.&lt;/p&gt;

&lt;h1 id=&#34;constants&#34;&gt;Constants&lt;/h1&gt;

&lt;p&gt;Contains all the constants shared by all modules.&lt;/p&gt;

&lt;h1 id=&#34;moduleregistry&#34;&gt;ModuleRegistry&lt;/h1&gt;

&lt;p&gt;When the plugin modules are loaded, it will register itself to this module along
with configuration. When /server/info is called, the endpoint will return all
plugged in modules and their configurations.&lt;/p&gt;

&lt;h1 id=&#34;util&#34;&gt;Util&lt;/h1&gt;

&lt;p&gt;Some useful utility method like uuid generator etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mask</title>
      <link>https://networknt.github.io/light-java/other/mask/</link>
      <pubDate>Sun, 23 Oct 2016 13:19:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/mask/</guid>
      <description>

&lt;p&gt;In the entire life cycle of the exchange, there might a lot of logging statements
written to log files or other persistence storage. These logs will be used to
assist production issue identifying and resolving and a wide group of people might
have access to these logs. In order to reduce the risk of leak customer info,
sensitive info needs to masked before logging. For example, credit card number,
sin number etc.&lt;/p&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Given different API will have different sensitive data, the mask is configurable
and can be applied at header, cookie, query parameters and body.&lt;/p&gt;

&lt;h1 id=&#34;mask-with-string&#34;&gt;Mask with String&lt;/h1&gt;

&lt;h1 id=&#34;mask-with-regex&#34;&gt;Mask with Regex&lt;/h1&gt;

&lt;h1 id=&#34;mask-with-jsonpath&#34;&gt;Mask with JsonPath&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://networknt.github.io/light-java/other/config/</link>
      <pubDate>Sun, 23 Oct 2016 13:18:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/config/</guid>
      <description>

&lt;p&gt;A configuration module that supports externalized config in official standalone
deployment or docker container&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Externalized configuration from the application package is very important. It
allows us to deploy the same package
to DEV/SIT/UAT/PROD environment with different configuration packages without
reopening the delivery package. For
development, embedded configuration give us the flexibility to take default
values out of the box.&lt;/p&gt;

&lt;p&gt;When dockerizing our application, the external configuration can be mapped to a
volume which can be updated and
restarted the container to take effect.&lt;/p&gt;

&lt;p&gt;For now, only file system configuration is supported but in a long run, this
module can be extended to support
configurations from database, http/https server and config API served by config
server. Given the risk of single
point failure, file system config is still the foundation. Only when the server
start, it will contact external
config sever to load (first time) or update local file system so that config
files are cached. Except first time
start the server, the server can use the local cache to start if config service
is not available.&lt;/p&gt;

&lt;h2 id=&#34;singleton&#34;&gt;Singleton&lt;/h2&gt;

&lt;p&gt;For one JVM, there should be only one instance of Config and it should be
shared by all the modules within the application. The class is designed as a
singleton class and has several abstract methods that should be implemented
in sub classes. A default File System based implementation is provided. Other
implementation will be provided in the future when it is needed.
 &lt;/p&gt;

&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;The following abstract methods are implemented in the default service provider.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Returns a HashMap by a config name (without .json)
public abstract Map&amp;lt;String, Object&amp;gt; getJsonMapConfig(String configName);

// Load config for server info so that the result can be masked with out impact the cached verison
public abstract Map&amp;lt;String, Object&amp;gt; getJsonMapConfigNoCache(String configName);

// Return a JsonNode by a config name (without .json)
public abstract JsonNode getJsonNodeConfig(String configName);

// Map the json to a POJO from a config name and class name
public abstract Object getJsonObjectConfig(String configName, Class clazz);

// Load config into a string by providing the full filename
public abstract String getStringFromFile(String filename);

// Load config into a InputStream by providing full filename
public abstract InputStream getInputStreamFromFile(String filename);

// A cached Jackson ObjectMapper that is shared to other modules
public abstract ObjectMapper getMapper();

// Clean up the config cache if there are any
public abstract void clear();

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;It is encouraged to create a POJO for your config if the JSON structure is static.
However, some of the config file have repeatable elements, a map is the only
options to represent the data in this case.&lt;/p&gt;

&lt;p&gt;The two methods return String and InputStream is for loading files such as text
file with different format and X509 certificates etc.&lt;/p&gt;

&lt;p&gt;getMapper() is a convenient way to get ObjectMapper instead of create one which
is too heavy.&lt;/p&gt;

&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;

&lt;p&gt;Loading configuration files from file system takes time so the config file will
be cached once it is loaded the first time. All subsequent access to the same
config file (maybe different key/value pair) will read from the cached copy.
In order to make sure that server start up won&amp;rsquo;t be impacted by all modules to
load config files, lazy loading is encouraged unless the module must be
initialized during server start up.&lt;/p&gt;

&lt;h2 id=&#34;loading-sequence&#34;&gt;Loading sequence&lt;/h2&gt;

&lt;p&gt;Each module should have a config file that named the same as the module name.
For example, Security module as a config file named security.json and it is
reside in the module /src/main/resources/config folder by default.&lt;/p&gt;

&lt;p&gt;For application that uses Security module, it can override the default module
level config by provide security.json in application&amp;rsquo;s resource
folder /src/main/resources/config.&lt;/p&gt;

&lt;p&gt;Config will also be loaded from class path of the application and this is
mainly used for testing as it is easy to inject different combination of
config copies in test cases into class path for unit testing.&lt;/p&gt;

&lt;p&gt;For official runtime environment, config files should be externalized to a
separate folder outside of the package by a system property
&amp;ldquo;light-java-config-dir&amp;rdquo;. You can start the server with
a &amp;ldquo;-Dlight-java-config-dir=/config&amp;rdquo; option and put all your files
into /config. Once in docker image, it can be mapped to a host volume
with -v /etc/undertow:/config in docker run command.&lt;/p&gt;

&lt;p&gt;Given above explanation, the loading sequence is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;System property &amp;ldquo;light-java-config-dir&amp;rdquo; specified directory&lt;/li&gt;
&lt;li&gt;Class Path&lt;/li&gt;
&lt;li&gt;Application resources/config folder&lt;/li&gt;
&lt;li&gt;Module resources/config folder&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Load config into static variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static final Map&amp;lt;String, Object&amp;gt; config = Config.getInstance().getJsonMapConfig(JwtHelper.SECURITY_CONFIG);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load config when it is used&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ValidatorConfig config = (ValidatorConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ValidatorConfig.class);

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>https://networknt.github.io/light-java/other/client/</link>
      <pubDate>Sun, 23 Oct 2016 12:26:20 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-java/other/client/</guid>
      <description>

&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;Client is used to call APIs from the following sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web Server&lt;/li&gt;
&lt;li&gt;Standalone Application/Mobile Application&lt;/li&gt;
&lt;li&gt;API/Service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It provides method to get authorization token and automatically gets client
credentials token for scopes in API to API calls. It also helps to pass correlationId
and traceabilityId to the next service.&lt;/p&gt;

&lt;h1 id=&#34;type-of-client&#34;&gt;Type of client&lt;/h1&gt;

&lt;h2 id=&#34;sync-client&#34;&gt;Sync Client&lt;/h2&gt;

&lt;p&gt;This is a wrapper of Apache HttpClient with built-in connection pools and TLS
support. It can be used to call another API/Service in the request context.&lt;/p&gt;

&lt;h2 id=&#34;async-client&#34;&gt;Async Client&lt;/h2&gt;

&lt;p&gt;This is a wrapper of Apache HttpAsyncClient with built-in connection pools and
TLS support. It should be used if multiple APIs will be called in the request
context.&lt;/p&gt;

&lt;h1 id=&#34;client-credentials-token-renew-and-cache&#34;&gt;Client Credentials token renew and cache&lt;/h1&gt;

&lt;p&gt;The renew of token happens behind the scene and it supports circuit breaker
if OAuth2 server is down or busy. It renews the token pro-actively before the
current one is expired and lets all requests go with the current token. It only
block other request if the current request is trying to renew an expired token.
When token renewal in this case fails, all request will be rejected with timeout
and subsequent requests the same until a grace period is passed so that the
renew process is start again.&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h3 id=&#34;get-sync-client&#34;&gt;get sync client&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    CloseableHttpClient client = Client.getInstance().getSyncClient();

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-async-client&#34;&gt;get async client&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    CloseableHttpAsyncClient client = Client.getInstance().getAsyncClient();

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;call-from-web-server&#34;&gt;call from web server&lt;/h3&gt;

&lt;p&gt;To set the header with authorization code JWT token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void addAuthToken(HttpRequest request, String token) 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the header with authorization code JWT token and traceabilityId.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void addAuthTokenTrace(HttpRequest request, String token, String traceabilityId) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;call-from-standalone-app-mobile-app&#34;&gt;call from standalone app/mobile app&lt;/h3&gt;

&lt;p&gt;To set the header with client credentials JWT token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void addCcToken(HttpRequest request) throws ClientException, ApiException 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the header with client credentials JWT token and traceabilityId.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void addCcTokenTrace(HttpRequest request, String traceabilityId) throws ClientException, ApiException 

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;call-from-api-service&#34;&gt;call from API/service&lt;/h3&gt;

&lt;p&gt;To pass in exchange.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void propagateHeaders(HttpRequest request, final HttpServerExchange exchange) throws ClientException, ApiException 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To pass in variables individually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void populateHeader(HttpRequest request, String authToken, String correlationId, String traceabilityId) throws ClientException, ApiException 

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>